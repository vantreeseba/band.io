// Generated by Haxe 3.4.0
(function ($hx_exports) { "use strict";
$hx_exports["de"] = $hx_exports["de"] || {};
$hx_exports["de"]["math"] = $hx_exports["de"]["math"] || {};
;$hx_exports["de"]["steer"] = $hx_exports["de"]["steer"] || {};
var com_dropecho_ai_steering_Behaviors = $hx_exports["de"]["steer"]["behaviors"] = function() { };
com_dropecho_ai_steering_Behaviors.seek = function(pos,target,maxVelocity) {
	if(maxVelocity == null) {
		maxVelocity = 0;
	}
	var desired = com_dropecho_math_Vector.sub2(target,pos);
	if(maxVelocity == 0) {
		return desired;
	} else {
		return desired.normalize(maxVelocity);
	}
};
com_dropecho_ai_steering_Behaviors.arrive = function(pos,target,arriveRadius,maxVelocity) {
	if(maxVelocity == null) {
		maxVelocity = 0;
	}
	if(arriveRadius == null) {
		arriveRadius = 0;
	}
	var desired = com_dropecho_ai_steering_Behaviors.seek(pos,target,maxVelocity);
	var distance = com_dropecho_math_Vector.sub2(pos,target).get_length();
	if(distance < arriveRadius) {
		return desired.scale(distance / arriveRadius);
	}
	return desired;
};
com_dropecho_ai_steering_Behaviors.pursue = function(pos,target,target_velocity,look_ahead) {
	if(look_ahead == null) {
		look_ahead = .25;
	}
	return com_dropecho_ai_steering_Behaviors.seek(pos,com_dropecho_ai_steering_Behaviors.predict_target_pos(target,target_velocity,look_ahead));
};
com_dropecho_ai_steering_Behaviors.flee = function(pos,target,fleeRadius) {
	if(fleeRadius == null) {
		fleeRadius = -1;
	}
	if(fleeRadius != -1 && fleeRadius >= target.distanceFrom(pos)) {
		return com_dropecho_math_Vector.sub2(pos,target);
	} else {
		return new com_dropecho_math_Vector(0,0,0);
	}
};
com_dropecho_ai_steering_Behaviors.evade = function(pos,target,target_velocity,look_ahead) {
	if(look_ahead == null) {
		look_ahead = .25;
	}
	return com_dropecho_ai_steering_Behaviors.flee(pos,com_dropecho_ai_steering_Behaviors.predict_target_pos(target,target_velocity,look_ahead));
};
com_dropecho_ai_steering_Behaviors.avoid = function() {
};
com_dropecho_ai_steering_Behaviors.seperate = function(pos,neighbors,amount) {
	if(amount == null) {
		amount = 128.0;
	}
	var seperationForce = new com_dropecho_math_Vector();
	var _g = 0;
	while(_g < neighbors.length) {
		var n = neighbors[_g];
		++_g;
		var awayFromNeighbor = com_dropecho_math_Vector.sub2(pos,n);
		var distanceToNeighbor = awayFromNeighbor.get_length();
		if(distanceToNeighbor == 0) {
			continue;
		}
		seperationForce.add(awayFromNeighbor.normalize().scale(128 / distanceToNeighbor));
	}
	return seperationForce;
};
com_dropecho_ai_steering_Behaviors.cohese = function(pos,neighbors,maxSpeed) {
	var centerOfMass = new com_dropecho_math_Vector();
	var neighborCount = neighbors.length;
	var _g1 = 0;
	while(_g1 < neighborCount) centerOfMass.add(neighbors[_g1++]);
	if(neighborCount > 0) {
		centerOfMass.scale(1 / neighborCount);
		return com_dropecho_ai_steering_Behaviors.arrive(pos,centerOfMass,0,maxSpeed);
	}
	return new com_dropecho_math_Vector();
};
com_dropecho_ai_steering_Behaviors.align = function(heading,neighborHeadings) {
	var averageHeading = new com_dropecho_math_Vector();
	var neighborCount = neighborHeadings.length;
	var _g1 = 0;
	while(_g1 < neighborCount) averageHeading.add(neighborHeadings[_g1++]);
	if(neighborCount > 0) {
		averageHeading.scale(1 / neighborCount);
		averageHeading.sub(heading);
	}
	return averageHeading;
};
com_dropecho_ai_steering_Behaviors.interpose = function(pos,target1,target2) {
	return com_dropecho_ai_steering_Behaviors.arrive(pos,com_dropecho_math_Vector.midpoint(target1,target2));
};
com_dropecho_ai_steering_Behaviors.wander = function(rotation,scalingFactor) {
	if(scalingFactor == null) {
		scalingFactor = 2;
	}
	if(rotation == null) {
		rotation = 0;
	}
	return com_dropecho_math_Vector.fromRad(rotation).add(com_dropecho_math_Vector.fromRad(rotation + (Math.random() - .5) / scalingFactor));
};
com_dropecho_ai_steering_Behaviors.predict_target_pos = function(target,target_velocity,look_ahead) {
	return com_dropecho_math_Vector.add2(target,com_dropecho_math_Vector.scale2(target_velocity,look_ahead));
};
var com_dropecho_math_MathUtils = $hx_exports["de"]["math"]["Utils"] = function() { };
com_dropecho_math_MathUtils.radToDeg = function(rad) {
	return com_dropecho_math_MathUtils.round(rad * 180 / Math.PI,7);
};
com_dropecho_math_MathUtils.degToRad = function(deg) {
	return com_dropecho_math_MathUtils.round(deg * Math.PI / 180,7);
};
com_dropecho_math_MathUtils.round = function(number,precision) {
	if(precision == null) {
		precision = 2;
	}
	var p = Math.pow(10,precision);
	number *= p;
	return Math.round(number) / p;
};
var com_dropecho_math_Vector = $hx_exports["de"]["math"]["Vector"] = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
com_dropecho_math_Vector.midpoint = function(vec,vec2) {
	return new com_dropecho_math_Vector((vec.x + vec2.x) / 2,(vec.y + vec2.y) / 2,(vec.z + vec2.z) / 2);
};
com_dropecho_math_Vector.add2 = function(vec1,vec2) {
	return new com_dropecho_math_Vector(vec1.x + vec2.x,vec1.y + vec2.y,vec1.z + vec2.z);
};
com_dropecho_math_Vector.sub2 = function(vec1,vec2) {
	return new com_dropecho_math_Vector(vec1.x - vec2.x,vec1.y - vec2.y,vec1.z - vec2.z);
};
com_dropecho_math_Vector.scale2 = function(vec,scale) {
	return new com_dropecho_math_Vector(vec.x,vec.y,vec.z).scale(scale);
};
com_dropecho_math_Vector.fromDeg = function(deg) {
	return com_dropecho_math_Vector.fromRad(com_dropecho_math_MathUtils.degToRad(deg));
};
com_dropecho_math_Vector.fromRad = function(rad) {
	return new com_dropecho_math_Vector(com_dropecho_math_MathUtils.round(Math.cos(rad),7),com_dropecho_math_MathUtils.round(Math.sin(rad),7));
};
com_dropecho_math_Vector.prototype = {
	dot: function(vec) {
		return this.x * vec.x + this.y * vec.y + this.z * vec.z;
	}
	,cross: function(vec) {
		return new com_dropecho_math_Vector(this.y * vec.z - this.z * vec.y,this.z * vec.x - this.x * vec.z,this.x * vec.y - this.y * vec.x);
	}
	,normalize: function(scale) {
		if(scale == null) {
			scale = 0;
		}
		var length = this.get_length();
		var normalLength = length != 0?1.0 / length:1;
		this.x *= normalLength;
		this.y *= normalLength;
		if(scale == 0) {
			return this;
		} else {
			return this.scale(scale);
		}
	}
	,equals: function(vec) {
		if(this.x == vec.x && this.y == vec.y) {
			return this.z == vec.z;
		} else {
			return false;
		}
	}
	,scale: function(scalar) {
		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		return this;
	}
	,add: function(vec) {
		this.x += vec.x;
		this.y += vec.y;
		this.z += vec.z;
		return this;
	}
	,sub: function(vec) {
		this.x -= vec.x;
		this.y -= vec.y;
		this.z -= vec.z;
		return this;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,distanceFrom: function(vec) {
		return new com_dropecho_math_Vector(this.x - vec.x,this.y - vec.y,this.z - vec.z).get_length();
	}
	,truncate: function(max) {
		var scaleFactor = max / this.get_length();
		if(scaleFactor < 1.0) {
			scaleFactor = scaleFactor;
		} else {
			scaleFactor = 1.0;
		}
		return this.scale(scaleFactor);
	}
	,toDeg: function() {
		return com_dropecho_math_MathUtils.radToDeg(Math.atan2(this.y,this.x));
	}
	,toRad: function() {
		return Math.atan2(this.y,this.x);
	}
};
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
